// Autogenerated using npm run gen Program
/*
 * Copy to other files
 * import Program from './Program';
 * <Program/>
 */
import styled from 'styled-components';
import PropTypes from 'prop-types';

class Program extends React.Component {
  constructor(props) {
    super(props);

    this.state = { active: true };
    this.handleButtonClick = this.handleButtonClick.bind(this);
    this.handleButtonIsActive = this.handleButtonIsActive.bind(this);
    this.handleButtonOver = this.handleButtonOver.bind(this);
    this.handleButtonOut = this.handleButtonOut.bind(this);
  }

  handleButtonClick() {
    this.setState((state) => {
      const newBool = !state.active;
      state.active = newBool;
    });

    if (this.state.active) {
      switch (this.props.name) {
        case 'Decryption':
          this.props.onHandleConfigStats(
            'attack',
            this.props.cyberdeckData.attributes.attack + 1
          );
          break;
        default:
      }
    } else {
      switch (this.props.name) {
        case 'Decryption':
          this.props.onHandleConfigStats(
            'attack',
            this.props.cyberdeckData.attributes.attack - 1
          );
          break;
        default:
      }
    }
  }

  handleButtonIsActive(active) {
    return active ? (
      <button
        className="btn btn-light"
        onClick={this.handleButtonClick}
        onMouseOver={this.handleButtonOver}
        onMouseOut={this.handleButtonOut}>
        {this.props.name}
      </button>
    ) : (
      <button
        className="btn btn-success"
        onClick={this.handleButtonClick}
        onMouseOver={this.handleButtonOver}
        onMouseOut={this.handleButtonOut}>
        {this.props.name}
      </button>
    );
  }

  handleButtonOver() {
    this.props.onHandleButtonHover(this.props.description);
  }

  handleButtonOut() {
    this.props.onHandleButtonHover('');
  }

  render() {
    const button = this.handleButtonIsActive(this.state.active);
    return (
      <Main classname="p-2">
        <div>{button}</div>
      </Main>
    );
  }
}

Program.propTypes = {
  onHandleProgramChange: PropTypes.func,
  onHandleConfigStats: PropTypes.func,
  onHandleButtonHover: PropTypes.func,
  name: PropTypes.string,
  description: PropTypes.string,
  cyberdeckData: PropTypes.object,
};

export default Program;

const Main = styled.div`
  font-family: Open Sans;
  font-weight: normal;
  margin: 3px;
`;
